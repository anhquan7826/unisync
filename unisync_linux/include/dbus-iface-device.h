/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#pragma once

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.anhquan.UnisyncDbus1.Device */

#define UNISYNC_DBUS_TYPE_DEVICE (unisync_dbus_device_get_type ())
#define UNISYNC_DBUS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UNISYNC_DBUS_TYPE_DEVICE, UnisyncDbusDevice))
#define UNISYNC_DBUS_IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UNISYNC_DBUS_TYPE_DEVICE))
#define UNISYNC_DBUS_DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UNISYNC_DBUS_TYPE_DEVICE, UnisyncDbusDeviceIface))

struct _UnisyncDbusDevice;
typedef struct _UnisyncDbusDevice UnisyncDbusDevice;
typedef struct _UnisyncDbusDeviceIface UnisyncDbusDeviceIface;

struct _UnisyncDbusDeviceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_accept_pair) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_connected_devices) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_pair_status) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_paired_devices) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reject_pair) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_unpair) (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

};

GType unisync_dbus_device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *unisync_dbus_device_interface_info (void);
guint unisync_dbus_device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void unisync_dbus_device_complete_get_connected_devices (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void unisync_dbus_device_complete_get_paired_devices (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *devices);

void unisync_dbus_device_complete_get_pair_status (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *state);

void unisync_dbus_device_complete_accept_pair (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void unisync_dbus_device_complete_reject_pair (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void unisync_dbus_device_complete_unpair (
    UnisyncDbusDevice *object,
    GDBusMethodInvocation *invocation,
    gboolean result);



/* D-Bus method calls: */
void unisync_dbus_device_call_get_connected_devices (
    UnisyncDbusDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_get_connected_devices_finish (
    UnisyncDbusDevice *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_get_connected_devices_sync (
    UnisyncDbusDevice *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void unisync_dbus_device_call_get_paired_devices (
    UnisyncDbusDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_get_paired_devices_finish (
    UnisyncDbusDevice *proxy,
    gchar ***out_devices,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_get_paired_devices_sync (
    UnisyncDbusDevice *proxy,
    gchar ***out_devices,
    GCancellable *cancellable,
    GError **error);

void unisync_dbus_device_call_get_pair_status (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_get_pair_status_finish (
    UnisyncDbusDevice *proxy,
    gchar **out_state,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_get_pair_status_sync (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    gchar **out_state,
    GCancellable *cancellable,
    GError **error);

void unisync_dbus_device_call_accept_pair (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_accept_pair_finish (
    UnisyncDbusDevice *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_accept_pair_sync (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void unisync_dbus_device_call_reject_pair (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_reject_pair_finish (
    UnisyncDbusDevice *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_reject_pair_sync (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void unisync_dbus_device_call_unpair (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean unisync_dbus_device_call_unpair_finish (
    UnisyncDbusDevice *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean unisync_dbus_device_call_unpair_sync (
    UnisyncDbusDevice *proxy,
    const gchar *arg_id,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define UNISYNC_DBUS_TYPE_DEVICE_PROXY (unisync_dbus_device_proxy_get_type ())
#define UNISYNC_DBUS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UNISYNC_DBUS_TYPE_DEVICE_PROXY, UnisyncDbusDeviceProxy))
#define UNISYNC_DBUS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UNISYNC_DBUS_TYPE_DEVICE_PROXY, UnisyncDbusDeviceProxyClass))
#define UNISYNC_DBUS_DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UNISYNC_DBUS_TYPE_DEVICE_PROXY, UnisyncDbusDeviceProxyClass))
#define UNISYNC_DBUS_IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UNISYNC_DBUS_TYPE_DEVICE_PROXY))
#define UNISYNC_DBUS_IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UNISYNC_DBUS_TYPE_DEVICE_PROXY))

typedef struct _UnisyncDbusDeviceProxy UnisyncDbusDeviceProxy;
typedef struct _UnisyncDbusDeviceProxyClass UnisyncDbusDeviceProxyClass;
typedef struct _UnisyncDbusDeviceProxyPrivate UnisyncDbusDeviceProxyPrivate;

struct _UnisyncDbusDeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UnisyncDbusDeviceProxyPrivate *priv;
};

struct _UnisyncDbusDeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType unisync_dbus_device_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UnisyncDbusDeviceProxy, g_object_unref)
#endif

void unisync_dbus_device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UnisyncDbusDevice *unisync_dbus_device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UnisyncDbusDevice *unisync_dbus_device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void unisync_dbus_device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UnisyncDbusDevice *unisync_dbus_device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UnisyncDbusDevice *unisync_dbus_device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UNISYNC_DBUS_TYPE_DEVICE_SKELETON (unisync_dbus_device_skeleton_get_type ())
#define UNISYNC_DBUS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UNISYNC_DBUS_TYPE_DEVICE_SKELETON, UnisyncDbusDeviceSkeleton))
#define UNISYNC_DBUS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UNISYNC_DBUS_TYPE_DEVICE_SKELETON, UnisyncDbusDeviceSkeletonClass))
#define UNISYNC_DBUS_DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UNISYNC_DBUS_TYPE_DEVICE_SKELETON, UnisyncDbusDeviceSkeletonClass))
#define UNISYNC_DBUS_IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UNISYNC_DBUS_TYPE_DEVICE_SKELETON))
#define UNISYNC_DBUS_IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UNISYNC_DBUS_TYPE_DEVICE_SKELETON))

typedef struct _UnisyncDbusDeviceSkeleton UnisyncDbusDeviceSkeleton;
typedef struct _UnisyncDbusDeviceSkeletonClass UnisyncDbusDeviceSkeletonClass;
typedef struct _UnisyncDbusDeviceSkeletonPrivate UnisyncDbusDeviceSkeletonPrivate;

struct _UnisyncDbusDeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UnisyncDbusDeviceSkeletonPrivate *priv;
};

struct _UnisyncDbusDeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType unisync_dbus_device_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UnisyncDbusDeviceSkeleton, g_object_unref)
#endif

UnisyncDbusDevice *unisync_dbus_device_skeleton_new (void);


G_END_DECLS
